{"ast":null,"code":"import _slicedToArray from \"/home/neofenrir13/react-bootcamp-materials/react/lightsout/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/neofenrir13/react-bootcamp-materials/react/lightsout/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/neofenrir13/react-bootcamp-materials/react/lightsout/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/neofenrir13/react-bootcamp-materials/react/lightsout/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/neofenrir13/react-bootcamp-materials/react/lightsout/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/neofenrir13/react-bootcamp-materials/react/lightsout/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/neofenrir13/react-bootcamp-materials/react/lightsout/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      console.log(\"FLIPPING!\", coord);\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x);\n      var hasWon = false;\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var tblBoard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push(React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }));\n        };\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          _loop(x);\n        }\n\n        tblBoard.push(React.createElement(\"tr\", {\n          key: y,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, row));\n      }\n\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, tblBoard));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/home/neofenrir13/react-bootcamp-materials/react/lightsout/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","console","log","split","map","Number","flipCell","setState","tblBoard","flipCellsAround","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;;IAEMC,K;;;;;AAMJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,KAAK,EAAE,MAAKC,WAAL;AAFI,KAAb;AAHiB;AAOlB;;;;kCAEa;AACZ,UAAID,KAAK,GAAG,EAAZ;;AACA,WAAI,IAAIE,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAA5B,EAAmCD,CAAC,EAApC,EAAyC;AACvC,YAAIE,GAAG,GAAG,EAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCD,UAAAA,GAAG,CAACG,IAAJ,CAASC,IAAI,CAACC,MAAL,KAAgB,KAAKZ,KAAL,CAAWa,mBAApC;AACD;;AACDV,QAAAA,KAAK,CAACO,IAAN,CAAWH,GAAX;AACD;;AACD,aAAOJ,KAAP;AACD;;;oCAEeW,K,EAAO;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,KAAzB;AADqB,wBAEA,KAAKd,KAFL;AAAA,UAEhBS,KAFgB,eAEhBA,KAFgB;AAAA,UAETH,KAFS,eAETA,KAFS;AAGrB,UAAIH,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAHqB,6BAIRW,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAJQ;AAAA;AAAA,UAIhBd,CAJgB;AAAA,UAIbG,CAJa;;AAOrB,eAASY,QAAT,CAAkBf,CAAlB,EAAqBG,CAArB,EAAwB;AACtB,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGC,KAAd,IAAuBJ,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGC,KAAzC,EAAgD;AAC9CH,UAAAA,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,IAAc,CAACL,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,CAAf;AACD;AACF;;AACDY,MAAAA,QAAQ,CAACf,CAAD,EAAGG,CAAH,CAAR;AACA,UAAIN,MAAM,GAAC,KAAX;AACA,WAAKmB,QAAL,CAAc;AAAClB,QAAAA,KAAK,EAALA,KAAD;AAAQD,QAAAA,MAAM,EAANA;AAAR,OAAd;AACD;;;6BAEQ;AAAA;;AACP,UAAMoB,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,YAAME,GAAG,GAAG,EAAZ;;AADyC,mCAEhCC,CAFgC;AAGvC,cAAIM,KAAK,aAAMT,CAAN,cAAWG,CAAX,CAAT;AACAD,UAAAA,GAAG,CAACG,IAAJ,CAAS,oBAAC,IAAD;AAAM,YAAA,GAAG,EAAEI,KAAX;AAAkB,YAAA,KAAK,EAAE,MAAI,CAACb,KAAL,CAAWE,KAAX,CAAiBE,CAAjB,EAAoBG,CAApB,CAAzB;AACP,YAAA,iBAAiB,EAAE;AAAA,qBAAM,MAAI,CAACe,eAAL,CAAqBT,KAArB,CAAN;AAAA,aADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAT;AAJuC;;AAEzC,aAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AAAA,gBAAlCA,CAAkC;AAK1C;;AACDc,QAAAA,QAAQ,CAACZ,IAAT,CAAc;AAAI,UAAA,GAAG,EAAEL,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAaE,GAAb,CAAd;AACD;;AACD,aACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGe,QADH,CADF,CADF;AAOD;;;;EA/DiBzB,S;;AAAdE,K,CACGyB,Y,GAAe;AACpBlB,EAAAA,KAAK,EAAE,CADa;AAEpBG,EAAAA,KAAK,EAAE,CAFa;AAGpBI,EAAAA,mBAAmB,EAAE;AAHD,C;AAkExB,eAAed,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  }\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n  }\n\n  createBoard() {\n    let board = [];\n    for(let y=0; y < this.props.nrows; y++ ) {\n      let row = []\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row)\n    }\n    return board\n  }\n\n  flipCellsAround(coord) {\n    console.log(\"FLIPPING!\", coord)\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y,x)\n    let hasWon=false\n    this.setState({board, hasWon})\n  }\n\n  render() {\n    const tblBoard = []\n    for (let y = 0; y < this.props.nrows; y++) {\n      const row = []\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`\n        row.push(<Cell key={coord} isLit={this.state.board[y][x]} \n          flipCellsAroundMe={() => this.flipCellsAround(coord)}\n        />)\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>)\n    }\n    return (\n      <table className=\"Board\">\n        <tbody>\n          {tblBoard}\n        </tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}